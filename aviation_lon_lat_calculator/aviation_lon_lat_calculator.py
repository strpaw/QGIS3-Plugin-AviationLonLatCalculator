# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AviationLonLatCalculator
                                 A QGIS plugin
 Calculates longitude, latitude for aviation data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Pawe≈Ç Strzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QWidget, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .aviation_lon_lat_calculator_dialog import AviationLonLatCalculatorDialog
import os.path
from datetime import datetime
from csv import DictReader
from .aviation_gis_tools.distance import Distance
from .aviation_gis_tools.bearing import Bearing
from .aviation_gis_tools.point_calculation import PointCalculation
from .aviation_gis_tools.angle import AT_LONGITUDE, AT_LATITUDE, Angle


class AviationLonLatCalculator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self._output_layer = None
        self._output_layer_name = None
        self._point_calculation = None
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'AviationLonLatCalculator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&AviationLonLatCalculator')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('AviationLonLatCalculator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/aviation_lon_lat_calculator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'AviationLonLatCalculator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&AviationLonLatCalculator'),
                action)
            self.iface.removeToolBarIcon(action)

    def _set_output_layer_name(self):
        """ Note: layer name is generated from timestamp. """
        timestamp = datetime.now()
        self._output_layer_name = "CalPoints_{}".format(timestamp.strftime("%Y_%m_%d_%H%M%f"))

    def create_output_layer(self):
        """ Create point layer to store calculated points.
        return: QgsVectorLayer
        """
        self._set_output_layer_name()
        layer = QgsVectorLayer('Point?crs=epsg:4326', self._output_layer_name, 'memory')
        provider = layer.dataProvider()
        layer.startEditing()
        provider.addAttributes([
            QgsField("CALC_POINT", QVariant.String, len=100),
            QgsField("CALC_LON", QVariant.String, len=100),
            QgsField("CALC_LAT", QVariant.String, len=100),
            QgsField("INPUT_DATA", QVariant.String, len=100),
        ])
        layer.commitChanges()
        QgsProject.instance().addMapLayer(layer)
        return layer

    def is_output_layer_removed(self):
        """ Check if output layer has been removed from layers. """
        return not bool(QgsProject.instance().mapLayersByName(self._output_layer_name))

    def _switch_input_csv_access(self):
        """ Enable/disable GUI elements to select input CSV file if input data mode is one of CSVs. """
        if 3 <= self.dlg.comboBoxInputDataMode.currentIndex() <= 5:
            self.dlg.labelInputCSV.setEnabled(True)
            self.dlg.mQgsFileWidgetInputCSV.setEnabled(True)
        else:
            self.dlg.labelInputCSV.setEnabled(False)
            self.dlg.mQgsFileWidgetInputCSV.setEnabled(False)

    def switch_input_data_mode(self):
        """ Switch input data mode:
        single point calculation: azimuth, distance
        single point calculation: azimuth, distance, offset and so on.
        """
        self.dlg.stackedWidgetInputData.setCurrentIndex(self.dlg.comboBoxInputDataMode.currentIndex())
        self._switch_input_csv_access()

    def get_csv_fields(self):
        if os.path.isfile(self.dlg.mQgsFileWidgetInputCSV.filePath()):
            with open(self.dlg.mQgsFileWidgetInputCSV.filePath(), 'r') as f:
                reader = DictReader(f, delimiter=';')
                return reader.fieldnames

    def _switch_csv_user_distance_UOM(self):
        """ Enable/disable possibility to select distance UOM by user. """
        if self.dlg.fieldAzmDistDistanceUOM.currentIndex() >= 1:
            self.dlg.csvUserDistanceUOM.setEnabled(False)
        else:
            self.dlg.csvUserDistanceUOM.setEnabled(True)

    def set_initial_csv_azimuth_distance_fields_assignment(self):
        self.dlg.fieldAzmDisPointName.clear()
        self.dlg.fieldAzmDistDistanceValue.clear()
        self.dlg.fieldAzmDistDistanceUOM.clear()
        self.dlg.fieldAzmDistDistanceUOM.addItem('[user UOM]')
        self.dlg.csvUserDistanceUOM.setEnabled(True)
        self.dlg.csvUserDistanceUOM.setCurrentIndex(0)
        self.dlg.fieldAzmDistAzimuth.clear()

    def assign_csv_azimuth_distance_fields(self, fields):
        """ Assign CSV field value from calculation mode CSV - Azimuth, Distance if input file has been changed.
        :param fields: list -> str
        """
        self.dlg.fieldAzmDisPointName.addItems(fields)
        self.dlg.fieldAzmDistDistanceValue.addItems(fields)
        self.dlg.fieldAzmDistDistanceUOM.addItems(fields)
        self.dlg.fieldAzmDistAzimuth.addItems(fields)

    def reset_csv_fields_assignment(self):
        """ Reset CSV fields assignment for CSV mode calculations in case input CSV file has been changed. """
        self.set_initial_csv_azimuth_distance_fields_assignment()

        fields = self.get_csv_fields()
        if fields:
            self.assign_csv_azimuth_distance_fields(fields)

    def _init_point_calculation(self):
        self._point_calculation = PointCalculation(ref_id=self.dlg.lineEditReferenceID.text(),
                                                   ref_lon=self.dlg.lineEditReferenceLongitude.text(),
                                                   ref_lat=self.dlg.lineEditReferenceLatitude.text())

    def _convert_csv_azimuth_distance(self):
        self._init_point_calculation()
        if self._point_calculation.ref_err:
            QMessageBox.critical(QWidget(), "Message", f"Reference point error!\n{self._point_calculation.ref_err}")
        else:

            if self.dlg.fieldAzmDistDistanceUOM.currentIndex() == 0:  # UOM by user, not from input file
                dist_uom = self.dlg.csvUserDistanceUOM.currentText()
            else:
                dist_uom = self.dlg.fieldAzmDistDistanceUOM.currentText()

            point_name_field = self.dlg.fieldAzmDisPointName.currentText()
            dist_field = self.dlg.fieldAzmDistDistanceValue.currentText()
            azm_field = self.dlg.fieldAzmDistAzimuth.currentText()

            provider = self._output_layer.dataProvider()
            feature = QgsFeature(self._output_layer.fields())

            with open(self.dlg.mQgsFileWidgetInputCSV.filePath()) as f:
                reader = DictReader(f, delimiter=';')
                for row in reader:
                    d = Distance(row[dist_field], row[dist_uom])
                    a = Bearing(row[azm_field])
                    calc_position = self._point_calculation.point_by_polar_coordinates(distance=d, azimuth=a)
                    if calc_position:
                        lon_dd, lat_dd = calc_position

                        feature['CALC_POINT'] = row[point_name_field]
                        feature['CALC_LON'] = Angle.convert_dd_to_dms(lon_dd, AT_LONGITUDE)
                        feature['CALC_LAT'] = Angle.convert_dd_to_dms(lon_dd, AT_LATITUDE)
                        feature["INPUT_DATA"] = self._point_calculation.info_by_polar_coordinates(distance=d, azimuth=a)
                        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(lon_dd, lat_dd)))

                        provider.addFeatures([feature])

                self._output_layer.commitChanges()

    def calculate(self):
        """ Calculate longitude, latitude based on input data. """
        if self.is_output_layer_removed():
            self._output_layer = self.create_output_layer()

        if self.dlg.stackedWidgetInputData.currentIndex() == 3:
            self._convert_csv_azimuth_distance()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = AviationLonLatCalculatorDialog()
            self.dlg.comboBoxInputDataMode.currentIndexChanged.connect(self.switch_input_data_mode)
            self.dlg.pushButtonCalculate.clicked.connect(self.calculate)
            self.dlg.pushButtonCancel.clicked.connect(self.dlg.close)
            self._output_layer = self.create_output_layer()
            self.dlg.mQgsFileWidgetInputCSV.fileChanged.connect(self.reset_csv_fields_assignment)
            self.dlg.mQgsFileWidgetInputCSV.setFilter('*.csv')
            self.dlg.fieldAzmDistDistanceUOM.currentIndexChanged.connect(self._switch_csv_user_distance_UOM)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        self.dlg.mQgsFileWidgetInputCSV.lineEdit().clear()
        self.set_initial_csv_azimuth_distance_fields_assignment()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
